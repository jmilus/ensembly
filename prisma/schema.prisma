generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fieldReference"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model EnsembleType {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(64) @unique
  typeColor     Json?           @db.JsonB
  ensembles     Ensemble[]
  divisions     Division[]      
}

model Ensemble {
  id          String               @id @default(cuid())
  name        String               @db.VarChar(64) @unique
  membership  EnsembleMembership[]
  type        EnsembleType         @relation(fields: [typeId], references: [id])
  typeId      Int
  event       EventEnsemble[]
  schema      Schema[]
}

model Member {
  id           String               @id @default(cuid())
  created      DateTime             @default(now())
  firstName     String               @db.VarChar(64)
  middleName   String?              @db.VarChar(64)
  lastName     String               @db.VarChar(64)
  suffix        String?              @db.VarChar(8)
  aka          String?              @db.VarChar(204)
  uniqueName   String               @db.VarChar(204) @unique
  memberBio    MemberBio?
  photos       PhotoSet?
  memberships  EnsembleMembership[]
  phoneNumbers PhoneNumber[]
  addresses    Address[]
  emails       Email[]
  attendance   Attendance[]
}

model MemberBio {
  id        String     @id @default(cuid())
  birthday  DateTime?  @db.Date
  sex       Sex?       @default(unspecified)
  height    Int?       @db.SmallInt
  weight    Int?       @db.SmallInt
  race      Race?      @default(unspecified)
  ethnicity String?    @db.VarChar(64)
  hair      HairColor? @default(unspecified)
  eyes      EyeColor?  @default(unspecified)
  member    Member     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String     @unique
}

model EnsembleMembership {
  id            String       @id @default(cuid())
  member        Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId      String
  ensemble      Ensemble     @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  ensembleId    String
  startDate     DateTime     @default(now())
  status        MembershipStatus?
  statusDate    DateTime?
  statusNote    String?      @db.VarChar(128)
  assignments   SchemaAssignment[]

  @@unique([memberId, ensembleId])
}

model EventModel {
  id             String      @id @default(cuid())
  name           String      @db.VarChar(64)
  modStartDate   DateTime    @db.Timestamptz(3)
  modEndDate     DateTime    @db.Timestamptz(3)
  details        String?     @db.VarChar(1000)
  eventType      EventType   @relation(fields: [typeId], references: [id])
  typeId         Int
  location       Address?    @relation(fields: [locationId], references: [id])
  locationId     String?     @unique
  interval       Int?        @db.SmallInt
  period         Period?
  occurrence     Json?       @db.JsonB
  recEndCount    Int?        @db.SmallInt
  recEndDate     DateTime?   @db.Timestamptz(3)
  ensembles      EventEnsemble[]
  events         Event[]
}

model Event {
  id            String          @id @default(cuid())
  model         EventModel      @relation(fields: [eventModelId], references: [id], onDelete: Cascade)
  eventModelId  String
  name          String?         @db.VarChar(64)
  anchorDate    String          @db.VarChar(10)
  startDate     DateTime        @db.Timestamptz(3)
  endDate       DateTime        @db.Timestamptz(3)
  exception     Boolean         @db.Boolean @default(false)
  location      Address?        @relation(fields: [locationId], references: [id])
  locationId    String?         @unique
  note          String?         @db.VarChar(1000)
  schemas       EventSchemas[]
  attendance    Attendance[]
  eventProgram  EventProgram?
}

model Schema {
  id            String              @id @default(cuid())
  name          String              @db.VarChar(64) @unique
  ensemble      Ensemble            @relation(fields: [ensembleId], references: [id], onDelete: Cascade)
  ensembleId    String
  events        EventSchemas[]
  assignments   SchemaAssignment[]
}

model EventSchemas {
  id          Int             @id @default(autoincrement())
  event       Event           @relation(fields: [eventId], references: [id])
  eventId     String
  schema      Schema          @relation(fields: [schemaId], references: [id])
  schemaId    String
}

model SchemaAssignment {
  membership    EnsembleMembership    @relation(fields: [membershipId], references: [id])
  membershipId  String
  schema        Schema                @relation(fields: [schemaId], references: [id])
  schemaId      String
  capacity      Capacity
  division      Division              @relation(fields: [divisionId], references: [id])
  divisionId    Int
  title         String?               @db.VarChar(64)

  @@id([membershipId, schemaId, divisionId])
}

model Division {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(64)
  alias              String               @db.VarChar(64)
  members            SchemaAssignment[]
  capacity           Capacity
  ensembleType       EnsembleType?        @relation(fields: [ensembleTypeId], references: [id])
  ensembleTypeId     Int?
  parentId           Int?
  parentDivision     Division?            @relation("SubDivision", fields: [parentId], references: [id])
  childDivisions     Division[]           @relation("SubDivision")
}

model EventProgram {
  id            String          @id @default(cuid())
  event         Event           @relation(fields: [eventId], references: [id])
  eventId       String          @unique
  work          Work[]
}

model Work {
  id            String          @id @default(cuid())
  name          String          @db.VarChar(64)
  filepath       String?         @db.VarChar(64)
  program       EventProgram[]
}

model Attendance {
  id            Int               @id @default(autoincrement())
  event         Event             @relation(fields: [eventId], references: [id])
  eventId       String
  member        Member            @relation(fields: [memberId], references: [id])
  memberId      String
  status        AttendanceStatus  @default(Uncounted)
}

model EventType {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(64)
  color       Json?     @db.JsonB
  eventModel  EventModel[]
}

model EventEnsemble {
  id           String      @id @default(cuid())
  eventModel   EventModel  @relation(fields: [eventModelId], references: [id], onDelete: Cascade)
  eventModelId String
  ensemble     Ensemble    @relation(fields: [ensembleId], references: [id])
  ensembleId   String
}

model PhotoSet {
  id       Int       @id @default(autoincrement())
  member   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String    @unique
  photos   Photo[]
}

model Photo {
  id         Int      @id @default(autoincrement())
  image      Bytes    @db.ByteA
  photoSet   PhotoSet @relation(fields: [photoSetId], references: [id], onDelete: Cascade)
  photoSetId Int      @unique
}

model PhoneNumber {
  id          String    @id @default(cuid())
  prefix       String?   @db.VarChar(4)
  phonenumber String    @db.VarChar(20)
  rank        PhoneRank @default(Home)
  member      Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String    @unique
}

model Address {
  id          String      @id @default(cuid())
  street      String?     @db.VarChar(64)
  street2     String?     @db.VarChar(64)
  city        String?     @db.VarChar(32)
  state       String?     @db.VarChar(2)
  postalCode  String?     @db.VarChar(8)
  country     String?     @db.VarChar(32)
  poBox       String?     @db.VarChar(16)
  rank        AddressRank @default(Home)
  member      Member?     @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId    String?
  eventModel  EventModel?
  event       Event?
}

model Email {
  id       String    @id @default(cuid())
  email    String    @db.VarChar(96)
  rank     EmailRank @default(Primary)
  member   Member    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String    @unique
}

model Profile {
  userEmail      String      @unique @db.VarChar(96)
  permissions    Permissions @relation(fields: [permissionsId], references: [id])
  permissionsId  String
}

model Permissions {
  id          String    @id @default(cuid())
  name        String    @unique
  security    Json      @db.JsonB
  profile      Profile[]
}

model Configuration {
  id          Int         @id @default(1)
  unitsystem  String      @db.VarChar(3)
}

enum EyeColor {
  unspecified
  brown
  blue
  green
  hazel
}

enum HairColor {
  unspecified
  black
  blonde
  brown
  red
  gray
  white
  bald
}

enum Sex {
  unspecified
  female
  male
}

enum Race {
  unspecified
  Black
  White
  Hispanic
  Asian
  NativeAmerican
}

enum MembershipStatus {
  Active
  Suspended
  Inactive
}

enum EmailRank {
  Primary
  Personal
  Work
  Secondary
  Old
}

enum AddressRank {
  Home
  Work
  Secondary
  Temporary
  Old
}

enum PhoneRank {
  Home
  Mobile
  Work
  Emergency
  Secondary
  Old
}

enum Capacity {
  Performer
  Crew
  Staff
}

enum Period {
  Week
  Month
}

enum AttendanceStatus {
  Present
  Excused
  Absent
  Uncounted
}